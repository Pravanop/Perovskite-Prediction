# -*- coding: utf-8 -*-
"""GapPredict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wmnpNX2wrJkyyb4TcbVgXQeOXBqmEd6x
"""

! pip install megnet
! pip install pymatgen

import numpy as np
from megnet.models import MEGNetModel
from megnet.data.crystal import CrystalGraph
from pymatgen import Lattice
from pymatgen import Structure
model = MEGNetModel.from_file('/content/drive/MyDrive/Perovskites prediction/Phase 3 - Transfer Learning/BandgapPredictor.hdf5')

class GapPredict(model,lattice,species_list,system):
  def _init_(self):
    self.model = model
    self.lattice = lattice
    self.species_list = species_list
    self.system = system
  
  def structure_generator(self):
    if(self.system = 'cubic'):
      structure = Structure(self.lattice,self.species_list,[(0,0,0),(0.5,0.5,0.5),(0.5, 0.5, 0), (0.5, 0, 0.5), (0, 0.5, 0.5)],coords_are_cartesian= False)
    if(self.system = 'orthorhombic'):
      structure = Structure(self.lattice,self.species_list,[(0,0,0),(0.5,0.5,0.5),(0.5, 0.5, 0), (0.5, 0, 0.5), (0, 0.5, 0.5)],coords_are_cartesian= False)
    else:
      structure = 0
    return structure
  
  def gapPredictor(self):
    structure = self.structure_generator()
    try:
      bandgap = model.predict_structure(structure)
    except:
      bandgap = 'nan'
    return bandgap