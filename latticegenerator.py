# -*- coding: utf-8 -*-
"""LatticeGenerator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zCxQJGfApk-9Ru1sN0L971dyC49pkZJn
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !apt install ase
# !apt install gpaw

import numpy as np
from ase.build import bulk
from gpaw import GPAW, PW
from ase.spacegroup import crystal
from ase.structure import molecule

class latticeGenerator():
  def __init__(self,species_list,positions):
    self.species_list = species_list
    self.positions = positions
    
  def cubic_constant(self):                                     #calculates lattice parameter (edge length) for cubic structure
    energies = []
    lattice_constants = np.linspace(2,10,15)    

    for a in lattice_constants:                                 #loop for calculating energy of structures with edge length varying from 2 to 10
      material = crystal(self.species_list,self.positions,cellpar = [a,a,a,90,90,90]) 
      material.set_calculator(GPAW(xc='PBE', 
                                  kpts=(6,6,6), # k-point mesh set to 6*6*6
                                  mode=PW(), 
                                  txt='gpaw.txt'))
      energies.append(material.get_potential_energy())          # list containing energies of all cubic structures
    return lattice_constants[energies.index(min(energies))]     #returns edge length for which minimum energy was obtained
  
  def orthorhombic_generator(self):                             #calculates lattice parameters (edge lengths) for orthorhombic structure
    energies = []
    lattice_constants_a = np.linspace(2,10,15)
    lattice_constants_c = np.linspace(3,12,15)
    for c in lattice_constants_c:       #master loop controlling cell parameter 'c' 
      for a in lattice_constants_a:     #loop for calculating energy of structures with varying cell parameter 'a' for a given parameter 'c'
        material = crystal(self.species_list,self.positions,cellpar = [a,a,c,90,90,90])
        material.set_calculator(GPAW(xc='PBE', 
                                    kpts=(6,6,6), # k-point mesh set to 6*6*6
                                    mode=PW(), 
                                    txt='gpaw_a.txt'))
        energies.append(material.get_potential_energy())        # list containing energies of all orthorhombic structures
    a_final = lattice_constants_a[energies.index(min(energies))]
    c_final = lattice_constants_c[energies.index(min(energies))]
    return a_final,c_final                                      #returns parameters for which minimum energy was obtained
